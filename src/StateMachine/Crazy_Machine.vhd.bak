-- Copyright (C) 1991-2012 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- Generated by Quartus II Version 12.1 Build 177 11/07/2012 SJ Web Edition
-- Created on Wed Apr 17 19:01:57 2019

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY Crazy_Machine IS
    PORT (
        reset : IN STD_LOGIC := '0';
        clock : IN STD_LOGIC;
        sw9 : IN STD_LOGIC := '0';
        sw8 : IN STD_LOGIC := '0';
        sw7 : IN STD_LOGIC := '0';
        sw6 : IN STD_LOGIC := '0';
        sw5 : IN STD_LOGIC := '0';
        pin1 : IN STD_LOGIC := '0';
        led9 : OUT STD_LOGIC;
        led8 : OUT STD_LOGIC;
        led7 : OUT STD_LOGIC;
        led6 : OUT STD_LOGIC;
        led5 : OUT STD_LOGIC;
        led4 : OUT STD_LOGIC
    );
END Crazy_Machine;

ARCHITECTURE BEHAVIOR OF Crazy_Machine IS
    TYPE type_fstate IS (Resting,Start,Star,Elevator,Slide,Finish);
    SIGNAL fstate : type_fstate;
    SIGNAL reg_fstate : type_fstate;
BEGIN
    PROCESS (clock,reg_fstate)
    BEGIN
        IF (clock='1' AND clock'event) THEN
            fstate <= reg_fstate;
        END IF;
    END PROCESS;

    PROCESS (fstate,reset,sw9,sw8,sw7,sw6,sw5,pin1)
    BEGIN
        IF (reset='1') THEN
            reg_fstate <= Resting;
            led9 <= '0';
            led8 <= '0';
            led7 <= '0';
            led6 <= '0';
            led5 <= '0';
            led4 <= '0';
        ELSE
            led9 <= '0';
            led8 <= '0';
            led7 <= '0';
            led6 <= '0';
            led5 <= '0';
            led4 <= '0';
            CASE fstate IS
                WHEN Resting =>
                    IF ((sw9 = '1')) THEN
                        reg_fstate <= Start;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= Resting;
                    END IF;

                    led9 <= '1';
                WHEN Start =>
                    IF ((sw8 = '1')) THEN
                        reg_fstate <= Star;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= Start;
                    END IF;

                    led8 <= '1';
                WHEN Star =>
                    IF ((sw7 = '1')) THEN
                        reg_fstate <= Elevator;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= Star;
                    END IF;

                    led7 <= '1';
                WHEN Elevator =>
                    IF ((sw6 = '1')) THEN
                        reg_fstate <= Slide;
                    ELSIF (((pin1 = '1') AND (sw6 = '0'))) THEN
                        reg_fstate <= Finish;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= Elevator;
                    END IF;

                    led6 <= '1';
                WHEN Slide =>
                    IF ((sw5 = '1')) THEN
                        reg_fstate <= Elevator;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= Slide;
                    END IF;

                    led5 <= '1';
                WHEN Finish =>
                    reg_fstate <= Resting;

                    led4 <= '1';
                WHEN OTHERS => 
                    led9 <= 'X';
                    led8 <= 'X';
                    led7 <= 'X';
                    led6 <= 'X';
                    led5 <= 'X';
                    led4 <= 'X';
                    report "Reach undefined state";
            END CASE;
        END IF;
    END PROCESS;
END BEHAVIOR;
